<?php

define('CTL_ONBOARDING_FIRST_COHORT_TO_USE_REGISTRATION_SYSTEM', 8);

define('CTL_ONBOARDING_ROLE_ACCEPTED', 'Accepted');
define('CTL_ONBOARDING_ROLE_INVITED', 'Invited');
define('CTL_ONBOARDING_ROLE_DEFERRED', 'Deferred');
define('CTL_ONBOARDING_ROLE_DECLINED', 'Dropout');
define('CTL_ONBOARDING_ROLE_TRAINEE', 'Trainee');
define('CTL_ONBOARDING_ROLE_TRAINER', 'Trainer');

define('CTL_ONBOARDING_REGISTRATION_CLOSED', 0);
define('CTL_ONBOARDING_REGISTRATION_OPEN', 1);

// TODO later ?
// - maybe these should be role IDs...
define('CTL_ONBOARDING_STATUS_PENDING', 0);
define('CTL_ONBOARDING_STATUS_ACCEPTED', 1);
define('CTL_ONBOARDING_STATUS_ASSIGNED', 2);
define('CTL_ONBOARDING_STATUS_WAIT_LISTED', 3);
define('CTL_ONBOARDING_STATUS_DROPPED_FAILED_BACKGROUND_CHECK', 4);
define('CTL_ONBOARDING_STATUS_DROPPED_CANCELED_BY_REGISTRANT', 5);
define('CTL_ONBOARDING_STATUS_DROPPED_OTHER', 6);

define('CTL_ONBOARDING_DEFAULT_TRAINER_CAPACITY', 35);

define('CTL_ONBOARDING_MAX_TRAINERS_PER_SLOT', 10);

// Hours are defined in 24-hour clock time (a.k.a. military time).
define('CTL_ONBOARDING_FIRST_START_HOUR', 800);
define('CTL_ONBOARDING_LAST_START_HOUR', 2000);
define('CTL_ONBOARDING_ONE_HOUR', 100);
define('CTL_ONBOARDING_SESSION_DURATION', 400);

$path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'ctl_onboarding');
require_once "$path/includes/email.inc";
require_once "$path/includes/helper.inc";


// TODO later ?
// /**
//  * Implements hook_cron().
//  */
// function ctl_onboarding_cron() {
//   _ctl_onboarding_do_background_check();
// }


/**
 * Implements hook_menu().
 */
function ctl_onboarding_menu() {
  $items['admin/config/ctl'] = array(
    'title'            => 'Crisis Text Line',
    'description'      => 'Configure CTL settings.',
    'position'         => 'right',
    'weight'           => -100,
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ctl/onboarding'] = array(
    'title'            => 'CTL Onboarding',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_ctl_onboarding_settings_form'),
    'access arguments' => array('administer onboarding'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'includes/admin.inc',
  );
  $items['node/%node/trainer'] = array(
    'title'            => 'Trainer Selection',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_ctl_onboarding_trainer_selection_form', 1),
    'access callback'  => array('_ctl_onboarding_trainer_selection_access_check'),
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'includes/trainer.inc',
  );
  $items['registration'] = array(
    'title'            => 'Training Session Registration',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ctl_onboarding_form'),
    'access arguments' => array('register for training'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/registration.inc',
  );

// TODO later
// - separate this into a submodule
  $items['registration-email-test'] = array(
    'title'            => 'Registration Email Test',
    'page callback'    => '_ctl_onboarding_registration_email_test',
    'access arguments' => array('administer onboarding'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/email.inc',
  );
  $items['deferred-email-test'] = array(
    'title'            => 'Deferred Email Test',
    'page callback'    => '_ctl_onboarding_deferred_email_test',
    'access arguments' => array('administer onboarding'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/email.inc',
  );
  $items['declined-email-test'] = array(
    'title'            => 'Declined Email Test',
    'page callback'    => '_ctl_onboarding_declined_email_test',
    'access arguments' => array('administer onboarding'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/email.inc',
  );

  return $items;
}


function _ctl_onboarding_trainer_selection_access_check($node) {
  return $node->type === 'training_team';
}


/**
 * Implements hook_permission().
 */
function ctl_onboarding_permission() {
  return array(
    'administer onboarding' => array(
      'title'       => t('Administer onboarding'),
      'description' => t('Manage cohort training session registration.'),
    ),
    'register for training' => array(
      'title'       => t('Register for training'),
      'description' => t('Allow users to sign up for a training session.'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function ctl_onboarding_theme($existing, $type, $theme, $path) {
  return array(
    'ctl_onboarding_table' => array(
      'render element' => 'element',
      'file'           => 'includes/theme.inc',
    ),
  );
}


/**
 * Implements hook_token_info().
 */
function ctl_onboarding_token_info() {
  $info['types']['ronboarding'] = array(
    'name'        => t('CTL Onboarding'),
    'description' => t('The token type for CTL Onboarding tokens.'),
  );
  $info['tokens']['ronboarding']['cohort'] = array(
    'name'        => t('Cohort'),
    'description' => t('The cohort number.'),
  );
  $info['tokens']['ronboarding']['slot_code'] = array(
    'name'        => t('Cohort'),
    'description' => t('The time slot code.'),
  );
  $info['tokens']['ronboarding']['name'] = array(
    'name'        => t('Name'),
    'description' => t('Either the preferred name or the first and last name of the potential trainee.'),
  );
  return $info;
}


/**
 * Implements hook_tokens().
 */
function ctl_onboarding_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type === 'ronboarding') {
    foreach ($tokens as $name => $original) {
      $value = NULL;
      switch ($name) {
        case 'cohort':
          $value = intval(variable_get('ctl_onboarding_cohort_id'));
          break;

        case 'registration-start':
          // TODO later
          // - handle default case
          $start = variable_get('ctl_onboarding_registration_start_date', '[X]');
          $year  = $start['year'];
          $month = $start['month'];
          $day   = $start['day'];
          $value = format_date(strtotime("$year-$month-$day"), 'custom', 'F j, Y');
          break;

        case 'registration-finish':
          // TODO later
          // - handle default case
          $finish = variable_get('ctl_onboarding_registration_finish_date', '[X]');
          $year   = $finish['year'];
          $month  = $finish['month'];
          $day    = $finish['day'];
          $value  = format_date(strtotime("$year-$month-$day"), 'custom', 'F j, Y');
          break;

        case 'slot_code':
          $slot_code = isset($data['slot_code']) ? $data['slot_code'] : '';
          $value     = _ctl_onboarding_format_slot_code_display($slot_code);
          break;

        case 'name':
          $value = isset($data['name']) ? $data['name'] : '';
          break;
      }
      if ($value) {
        $replacements[$original] = $value;
      }
    }
  }
  return $replacements;
}


/**
 * Implements hook_views_api().
 */
function ctl_onboarding_views_api() {
  return array(
    'api'  => 3,
    'path' => drupal_get_path('module', 'ctl_onboarding') . '/includes',
  );
}


function ctl_onboarding_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['slot_code'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Slot code'),
    '#default_value' => '',
    '#weight'        => 90,
  );

  $form['#validate'][] = '_ctl_onboarding_form_user_profile_form_validate_extra';
  $form['#submit'][]   = '_ctl_onboarding_form_user_profile_form_submit_extra';
}


function _ctl_onboarding_form_user_profile_form_validate_extra($form, &$form_state) {
  dsm('_ctl_onboarding_form_user_profile_form_validate_extra');

  $values    = $form_state['values'];
  $cohort_id = $values['field_cohort'];
  $slot_code = $values['slot_code'];

  dsm($cohort_id);
  dsm(gettype($cohort_id));
  dsm($slot_code);
  dsm(gettype($slot_code));

  // If a cohort is defined and at least the first cohort to use the
  // registration system then make sure that a slot code is defined too.
  // Earlier cohorts are exempt because the registration system didn't
  // exist back then.
  if ($cohort_id < 1) {
    if (!empty($slot_code)) {
      form_set_error('slot_code', t('There must be a cohort assigned in order for a slot code to be assigned.'));
      return;
    }
  }
  if ($cohort_id >= CTL_ONBOARDING_FIRST_COHORT_TO_USE_REGISTRATION_SYSTEM) {
    if (empty($slot_code)) {
      form_set_error('slot_code', t('For cohorts ' . CTL_ONBOARDING_FIRST_COHORT_TO_USE_REGISTRATION_SYSTEM . ' and above there must a slot code given.'));
      return;
    }
  }
  if (!empty($slot_code)) {
    if (!_ctl_onboarding_validate_slot_code($slot_code)) {
      form_set_error('slot_code', t('The slot code is not in a valid format.'));
      return;
    }
  }

  // Check if the slot code is valid within the given cohort.
  $query  = 'SELECT uid '
          . 'FROM {ctl_onboarding_registrant} '
          . 'WHERE cohort_id = :cohort_id AND slot_code = :slot_code';
  $args   = array(':cohort_id' => $cohort_id, ':slot_code' => $slot_code);
  $result = db_query($query, $args);

  // TODO

  // Check if the user had already registered for the time slot.

  // if so return without error

  dsm($result);

  if (empty($result)) {
    $error_msg = 'Cohort @cohort does not include the @slot_code time slot.';
    $error_msg = t($error_msg, array(
      '@cohort'    => $cohort_id,
      '@slot_code' => $slot_code,
    ));
    form_set_error('slot_code', $error_msg);
    return;
  }

  // Check that the slot code is available.
  $query  = 'SELECT num_trainers, num_registrants '
          . 'FROM {ctl_onboarding_slot} '
          . 'WHERE cohort_id = :cohort_id AND slot_code = :slot_code';
  $args   = array(':cohort_id' => $cohort_id, ':slot_code' => $slot_code);
  $result = db_query($query, $args);

  dsm($result);

  if (empty($result)) {
    // 'error_message' => t("Could not find info for the !slot_code time slot!  Please notify a trainer or site administrator.", array('!slot_code' => $slot_code)),
    $error_msg = 'Cohort @cohort time slot @slot_code is full.';
    $error_msg = t($error_msg, array(
      '@cohort'    => $cohort_id,
      '@slot_code' => $slot_code,
    ));
    form_set_error('slot_code', $error_msg);
    return;
  }

  dsm($result);

  if (empty($result)) {
    $error_msg = 'Cohort @cohort time slot @slot_code is full.';
    $error_msg = t($error_msg, array(
      '@cohort'    => $cohort_id,
      '@slot_code' => $slot_code,
    ));
    form_set_error('slot_code', $error_msg);
    return;
  }
}


function _ctl_onboarding_form_user_profile_form_submit_extra($form, &$form_state) {
  dsm('_ctl_onboarding_form_user_profile_form_submit_extra');

  $values    = $form_state['values'];
  $cohort_id = $values['field_cohort'];
  $slot_code = $values['slot_code'];

  // TODO

  // if the user had already registered for the time slot.
  // return without saving the time slot change and without a message
  // saying that the time slot was saved


  // dsm($values);

  // TODO
  // - on cohort change
  //   - check that
  // - on slot code change
  //   - validate
  //   - check that
  // - update the user's registry entry
  // - remove their previous entry
  // - add their new entry

  // The user's cohort must be defined on the

  // field_cohort


  // Update the user's training session registration info.

  //

  // // See if the user has attempted registering already.
  // $query = db_select('ctl_onboarding_registrant', 'r');
  // $query->addField('r', 'slot_code');
  // $query->addField('r', 'status');
  // $result = $query
  //   ->condition('r.uid', $uid)
  //   ->condition('r.cohort_id', $cohort_id)
  //   ->execute()
  //   ->fetchAll();

  // dsm($slot_code);
}
