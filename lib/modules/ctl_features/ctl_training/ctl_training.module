<?php

include_once 'ctl_training.features.inc';
include_once 'ctl_training.filter.inc';

/**
 * Implements hook_node_view().
 */
function ctl_training_node_view($node, $view_mode, $langcode) {
    _ctl_training_filter_node_view($node);

    if ($node->type == 'course') {
        if ($view_mode == 'full' && $node->course['outline'] == 'course') {
            course_take_course($node);
            drupal_goto('node/'.$node->nid.'/takecourse');
        }
    }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ctl_training_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    global $user;

    $account = user_load($user->uid);

    foreach ($data['actions']['output'] as $key => $item) {
        if ($item['#link']['path'] == 'messages/new') {
            if (isset($account->field_trainer) && !empty($account->field_trainer)) {
                unset($data['actions']['output'][$key]);

                $tid = $account->field_trainer[LANGUAGE_NONE][0]['target_id'];

                $data['actions']['output'][] = array(
                    '#theme' => 'menu_local_action',
                    '#link' => array(
                        'href' => 'messages/new/'.$tid,
                        'title' => t('Message my trainer'),
                    ),
                );
            } else if (in_array('Trainer', $user->roles)) {
                $trainees = _ctl_training_get_trainees();
                //unset($data['actions']['output'][$key]);
                $uids = implode(',', $trainees);

                $data['actions']['output'][] = array(
                    '#theme' => 'menu_local_action',
                    '#link' => array(
                        'href' => 'messages/new/'.$uids,
                        'title' => t('Message ALL trainees'),
                    ),
                );

                $data['actions']['output'][] = array(
                    '#theme' => 'menu_local_action',
                    '#link' => array(
                        'href' => 'messages/new/multi',
                        'title' => t('Message multiple trainees'),
                    ),
                );
            }
        }
    }
}

function _ctl_training_get_trainees() {
    global $user;

    $q = new EntityFieldQuery('entity_type', 'user');
    $q->fieldCondition('field_trainer', 'target_id', $user->uid, '=');
    $res = $q->execute();

    if (isset($res['user'])) {
        return array_keys($res['user']);
    } else {
        return array();
    }
}

/**
 * Implements hook_module_implements_alter().
 */
function ctl_training_module_implements_alter(&$implementations, $hook) {
    $make_last = array(
        'menu_local_tasks_alter',
        'privatemsg_name_lookup',
    );

    if (in_array($hook, $make_last)) {
        $local = $implementations['ctl_training'];
        unset($implementations['ctl_training']);
        $implementations['ctl_training'] = $local;
    }
}

function ctl_training_form_privatemsg_new_alter(&$form, &$form_state, $form_id) {
    if (strpos(arg(2), ',')) {
        drupal_set_title('Write new message to group');
        $form['recipient']['#access'] = FALSE;
    } else if (arg(2) == 'multi') {
        $title = drupal_get_title();
        $search = '/\[(.*)\]/';
        drupal_set_title(preg_replace($search, '', $title));
    } else if (!is_null(arg(2))) {
        $title = drupal_get_title();
        $search = '/\[(.*)\]/';
        drupal_set_title(preg_replace($search, '', $title));
        $form['recipient']['#access'] = FALSE;
    } else {
        $accounts = user_load_multiple(_ctl_training_get_trainees());

        if (!empty($accounts)) {
            $options = array();
            foreach ($accounts as $account) {
                $options[$account->uid] = format_username($account);
            }

            $form['recipient']['#type'] = 'select';
            unset($form['recipient']['#size']);
            $form['recipient']['#options'] = $options;
        }
    }
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function ctl_training_privatemsg_name_lookup($string) {
    if (is_numeric($string)) {
        $res = db_query("SELECT * FROM {users} WHERE uid=:uid", array('uid' => intval($string)));
        if ($account = $res->fetch()) {
            $account->type = 'user';
            $account->recipient = $account->uid;
            return array($account);
        }
    }
}
