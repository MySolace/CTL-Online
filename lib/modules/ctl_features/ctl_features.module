<?php

/**
 * Implements hook_node_access().
 */
function ctl_features_node_access($node, $op, $account) {
    if (is_object($node) && $node->type == 'application') {
        if (!user_is_logged_in()) {
            return NODE_ACCESS_DENY;
        }

        if ($node->status == 1) {
            if ($op != 'create' && !user_access('access user profiles')) {
                return NODE_ACCESS_DENY;
            }
        }
    }
}

function ctl_features_cron() {
    $last_run = variable_get('ctl_features_last_run', -1);

    // Run daily
    if ($last_run < date('z') || $last_run == 365) {
        // Run at 7am
        if (date('G') >= 7) {
            ctl_features_update_roles();
            variable_set('ctl_features_last_run', date('z'));
        }
    }
}

function ctl_features_update_roles() {
    $api_key = variable_get('ctl_features_api_key');

    $roles = array(
        1 => 'Crisis Counselor I',
        2 => 'Crisis Counselor II',
        3 => 'Crisis Counselor III',
    );

    $q = db_select('users', 'u');
    $q->join('users_roles', 'ur', 'ur.uid=u.uid');
    $q->join('role', 'r', 'r.rid=ur.rid');
    $q->condition('r.name', $roles, 'IN');
    $q->fields('u', array('uid', 'mail'));
    $q->fields('r', array('name', 'rid'));

    $r = $q->execute();

    while ($account = $r->fetchAssoc()) {
        $mail = $account['mail'];
        $url = "https://app.crisistextline.org/ajax/user/level?api_key=$api_key&email=$mail";
        $new_rank = intval(ctl_features_curl($url));

        $old_rank = array_search($account['name'], $roles);
        if ($new_rank > $old_rank) {
            $user = user_load($account['uid']);
            unset($user->roles[$account['rid']]);

            $new_role_name = $roles[$new_rank];
            $new_role_rid = ctl_features_get_rid($new_role_name);

            $user->roles[$new_role_rid] = $new_role_name;

            user_save($user);
        }
    }
}

function ctl_features_get_rid($role_name) {
    $roles = drupal_static(__FUNCTION__);

    if (!isset($roles)) {
        $q = db_select('role', 'r')
            ->fields('r')
            ->execute();

        $roles = $q->fetchAllAssoc('name');
    }

    return $roles[$role_name]->rid;
}

function ctl_features_curl($url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $url);
    $data = curl_exec($ch);
    curl_close($ch);

    return $data;
}

/**
 * Implements hook_form_alter().
 */
function ctl_features_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'application_node_form' || $form_id == 'application_2_node_form') {
        $form['actions']['draft'] = array(
            '#type' => 'submit',
            '#value' => t('Save as Draft'),
            '#weight' => '1',
            '#submit' => array('_ctl_features_save_draft_submit'),
            '#validate' => array('_ctl_features_save_draft_validate'),
            '#attributes' => array(
                'class' => array('cancel'), // add the class cancel will skip any clientside validation
            ),
        );

        $form['actions']['submit']['#value'] = 'Submit Application';
        $form['actions']['submit']['#validate'][] = '_ctl_features_submit_app';
    }

    else if ($form_id == 'recommendation_node_form') {
        $form['actions']['submit']['#value'] = 'Submit';
    }

    else if ($form_id == 'user_register_form') {
        if (isset($form['field_partner_referral'])) {
            $form['field_partner_referral'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
            if (isset($_GET['campaign'])) {
                $form['field_partner_referral'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['campaign'];
            }
        }
    }
}

/**
 * Implements hook_for_validate().
 */
function ctl_features_application_node_form_validate($node, $form, &$form_state) {

}

function _ctl_features_save_draft_validate($form, &$form_state) {
    // Force unpublished
    $form_state['values']['status'] = 0;
    $errors = &drupal_static('form_set_error', NULL, TRUE);
}

function _ctl_features_save_draft_submit($form, &$form_state) {
    drupal_get_messages();
    node_form_submit($form, $form_state);
}

function _ctl_features_submit_app($form, &$form_state) {
    $form_state['values']['status'] = 1;
}

/**
* Implements hook_field_widget_form_alter().
*
* Have boolean fields output the true first.
*/
function ctl_features_field_widget_form_alter(&$element, &$form_state, $context) {
    if ($context['field']['type'] == 'list_boolean' && isset($element['#options'])) {
        $element['#options'] = array_reverse($element['#options'], TRUE);
    }
}
