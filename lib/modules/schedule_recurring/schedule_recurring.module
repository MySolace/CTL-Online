<?php

module_load_include('inc', 'schedule_recurring', 'field');

module_load_include('inc', 'schedule_recurring', 'time_off');
module_load_include('inc', 'schedule_recurring', 'make_up');

/**
 * Implements hook_permission().
 */
function schedule_recurring_permission() {
  return array(
    // SHIFTS
    'administer schedule recurring settings' => array(
      'title' => t('Administer schedule recurring'),
      'description' => t('Manage settings for recurring scheduling'),
    ),
    'sign up for shifts' => array(
      'title' => t('Sign up for shifts'),
      'description' => t('Sign up for shifts using schedule recurring'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function schedule_recurring_entity_info() {
  $entities = array(
    'time_off' => schedule_recurring_time_off_entity(),
    'make_up' => schedule_recurring_make_up_entity(),
  );

  return $entities;
}


/**
 * Implements hook_menu().
 */
function schedule_recurring_menu() {
  $items = array();

  $items['admin/config/schedule_recurring'] = array(
    'title' => t('Recurring Scheduler settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schedule_recurring_admin'),
    'access arguments' => array('administer schedule recurring settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['schedule/my-schedule'] = array(
    'title' => t('My Schedule'),
    'file' => 'schedule.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
    'page callback' => 'schedule_recurring_my_schedule',
    'access arguments' => array('sign up for shifts'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['schedule/sign-up'] = array(
    'title' => t('Shift scheduling'),
    'file' => 'schedule.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schedule_recurring_available'),
    'access arguments' => array('sign up for shifts'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['schedule/confirm'] = array(
    'title' => t('Shift confirmation'),
    'file' => 'schedule.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
    'page callback' => 'schedule_recurring_confirm',
    'access arguments' => array('sign up for shifts'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['schedule'] = array(
    'title' => t('Schedule'),
    'file' => 'schedule.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schedule_recurring_schedule'),
    'access arguments' => array('sign up for shifts'),
    'type' => MENU_NORMAL_ITEM,
  );

  /**
   * Time off
   */

  $items['time-off'] = array(
    'title' => t('Take time off'),
    'page callback' => 'time_off_add',
    'access arguments' => array('sign up for shifts'),
    'file' => 'time_off.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  $items['time-off/%'] = array(
    'page callback' => 'time_off_view',
    'page arguments' => array(1),
    'access arguments' => array('sign up for shifts'),
    'file' => 'time_off.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  $items['time-off/%/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_off_form', 1),
    'access arguments' => array('sign up for shifts'),
    'file' => 'time_off.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  $items['time-off/%/delete'] = array(
    'page callback' => 'time_off_delete',
    'page arguments' => array(1),
    'access arguments' => array('sign up for shifts'),
    'file' => 'time_off.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  /**
   * Make ups
   */
  $items['make-up'] = array(
    'title' => t('Make up a shift'),
    'page callback' => 'make_up_add',
    'access arguments' => array('sign up for shifts'),
    'file' => 'make_up.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  $items['make-up/%'] = array(
    'page callback' => 'make_up_view',
    'page arguments' => array(1),
    'access arguments' => array('sign up for shifts'),
    'file' => 'make_up.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  $items['make-up/%/cancel'] = array(
    'page callback' => 'make_up_delete',
    'page arguments' => array(1),
    'access arguments' => array('sign up for shifts'),
    'file' => 'make_up.inc',
    'file path' => drupal_get_path('module', 'schedule_recurring'),
  );

  return $items;
}

/**
 * Menu callback for module settings.
 */
function schedule_recurring_admin() {
  $form = array();

  $mapping = variable_get('schedule_recurring_shift_mapping', array());
  $mapping[] = array(
    'publisher' => '',
    'subscriber' => '',
    'points' => '',
  );

  $form['schedule_recurring_shift_mapping'] = array(
    '#theme' => 'table',
    '#tree' => TRUE,
    '#suffix' => t('Reset a role to "- Select -" to remove it from the mapping.'),
    '#rows' => array(),
    '#header' => array('Shift publisher', 'Shift subscriber', 'Points'),
  );


  foreach ($mapping as $key => $map) {
    $form['schedule_recurring_shift_mapping'][$key]['publisher'] = array(
      '#type' => 'select',
      '#options' => array('' => '- Select -') + user_roles(),
      '#default_value' => $map['publisher'],
    );

    $form['schedule_recurring_shift_mapping'][$key]['subscriber'] = array(
      '#type' => 'select',
      '#options' => array('' => '- Select -') + user_roles(),
      '#default_value' => $map['subscriber'],
    );

    $form['schedule_recurring_shift_mapping'][$key]['points'] = array(
      '#type' => 'textfield',
      '#default_value' => $map['points'],
      '#size' => 3,
    );

    $form['schedule_recurring_shift_mapping']['#rows'][] = array(
      array(
        'data' => &$form['schedule_recurring_shift_mapping'][$key]['publisher'],
      ), array(
        'data' => &$form['schedule_recurring_shift_mapping'][$key]['subscriber'],
      ), array(
        'data' => &$form['schedule_recurring_shift_mapping'][$key]['points'],
      ),
    );
  }

  $form['schedule_recurring_points_per_block'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_number'),
    '#title' => t('Maximum number of points available during a timeslot.'),
    '#default_value' => variable_get('schedule_recurring_points_per_block', 100),
    '#size' => 5,
  );

  $form['schedule_recurring_shift_increment'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_number'),
    '#title' => t('Shift interval'),
    '#field_prefix' => 'start a shift every',
    '#field_suffix' => 'minutes',
    '#default_value' => variable_get('schedule_recurring_shift_increment', 30),
    '#size' => 5,
  );

  $form['schedule_recurring_shift_duration'] = array(
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_number'),
    '#title' => t('Shift length'),
    '#field_suffix' => 'minutes',
    '#default_value' => variable_get('schedule_recurring_shift_duration', 240),
    '#size' => 5,
  );

  $form['schedule_recurring_priority_shifts'] = array(
    '#type' => 'textarea',
    '#title' => t('Prioritized shifts'),
    '#rows' => 10,
    '#description' => 'One time range per line. For Monday (0-based day 1 of the week), 3pm-11pm, use: 1:1500-2300',
    '#default_value' => implode("\n", variable_get('schedule_recurring_priority_shifts', array())),
  );

  $form['schedule_recurring_shift_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Shift confirmation email text'),
    '#rows' => 10,
    '#description' => 'The email will start with "Name, Your DURATION shift has been confirmed for DAY starting at TIME.',
    '#default_value' => variable_get('schedule_recurring_shift_email', ''),
  );

  $form = system_settings_form($form);
  array_unshift($form['#submit'], '_schedule_recurring_admin_submit');

  return $form;
}

function schedule_recurring_cron() {

}

function _schedule_recurring_admin_submit($form, &$form_state) {
  $form_state['values']['schedule_recurring_priority_shifts'] = explode("\n", $form_state['values']['schedule_recurring_priority_shifts']);
  foreach ($form_state['values']['schedule_recurring_shift_mapping'] as $key => $map) {
    if (empty($map['publisher']) || empty($map['subscriber'])) {
      unset($form_state['values']['schedule_recurring_shift_mapping'][$key]);
    }
  }
}

function schedule_recurring_is_publisher() {
  global $user;

  $mapping = variable_get('schedule_recurring_shift_mapping');

  foreach ($mapping as $role) {
    if (isset($user->roles[$role['publisher']])) {
      return true;
    }
  }

  return false;
}
/**
 * Internal method for who is a setter.
 */
function _schedule_recurring_setters() {
  $setters = &drupal_static(__FUNCTION__);

  if (!isset($setters)) {
    $setters = variable_get('schedule_recurring_shift_setters', array());
    $setters = array_filter(array_values($setters), function ($var) {
      return $var != 0;
    });
  }

  return $setters;
}


function _schedule_recurring_days($pluralize = TRUE) {
  if ($pluralize) {
    return array(
      'Sundays',
      'Mondays',
      'Tuesdays',
      'Wednesdays',
      'Thursdays',
      'Fridays',
      'Saturdays',
    );
  } else {
    return array(
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday',
    );
  }
}

function _schedule_recurring_times($include_2400 = FALSE) {
  static $times;

  $accessor = ($include_2400) ? 'include' : 'exclude';
  $interval = variable_get('schedule_recurring_shift_increment');

  if (!isset($times[$accessor])) {
    $times[$accessor] = array();

    for ($i = 0; $i < 24; $i++) {
      for ($j = 0; $j < 60; $j += $interval) {
        $k = $j < 10 ? '0'.$j : $j;
        $times[$accessor][intval($i . $k)] = (($i % 12) ?: 12) . ':'.$k.' '. (($i < 12) ? 'am' : 'pm');
      }
    }

    if ($accessor == 'include') {
      unset($times[$accessor][0]);
      $times[$accessor][2400] = '12:00 am (following day)';
    }
  }

  return $times[$accessor];
}

function schedule_recurring_next_shift($num_increments = 1) {
  $increment = variable_get('schedule_recurring_shift_increment');

  $today = date('w');

  $next_minutes = (floor(date('i') / $increment) * $increment) + ($increment * $num_increments);
  $next_hour = date('H') + floor($next_minutes / 60);

  if ($next_minutes >= 60) {
    $next_minutes = $next_minutes % 60;
  }

  $next_shift = $next_hour . str_pad($next_minutes, 2, '0', STR_PAD_LEFT);

  return $next_shift;
}

function schedule_recurring_mail($key, &$message, $params) {
  switch ($key) {
    case 'shift_confirmation':
      $days = _schedule_recurring_days();
      $times = _schedule_recurring_times();

      $message['subject'] = t('Crisis Text Line Shift Confirmation');
      $message['body'][] = t("@name,\n\nYour @time shift has been confirmed for @day starting at @start.\n\n@message", array(
        '@name' => format_username($params['account']),
        '@time' => (variable_get('schedule_recurring_shift_duration') / 60) . ' hour',
        '@day' => $days[$params['shift']['day']],
        '@start' => $times[$params['shift']['start']],
        '@message' => variable_get('schedule_recurring_shift_email', ''),
      ));

      break;
  }
}
